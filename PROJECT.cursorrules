# Cursor AIアシスタントへの指示書

## 重要

ユーザーはあなたよりプログラミングが得意ですが、時短のためにあなたにコーディングを依頼しています。

2回以上連続でテストを失敗した時は、現在の状況を整理して、一緒に解決方法を考えます。

あなたは GitHubから学習した広範な知識を持っており、個別のアルゴリズムやライブラリの使い方は私が実装するよりも速いでしょう。テストコードを書いて動作確認しながら、ユーザーに説明しながらコードを書きます。

反面、現在のコンテキストに応じた処理は苦手です。コンテキストが不明瞭な時は、ユーザーに確認します。

## 作業開始準備

`git status` で現在の git のコンテキストを確認します。
もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。

無視するように言われた場合は、そのまま続行します。


# コーディングプラクティス

## 原則

### 関数型アプローチ (FP)

- 純粋関数を優先
- 不変データ構造を使用
- 副作用を分離
- 型安全性を確保

### ドメイン駆動設計 (DDD)

- 値オブジェクトとエンティティを区別
- 集約で整合性を保証
- リポジトリでデータアクセスを抽象化
- 境界付けられたコンテキストを意識

### テスト駆動開発 (TDD)

- Red-Green-Refactorサイクル
- テストを仕様として扱う
- 小さな単位で反復
- 継続的なリファクタリング

## 実装パターン

### 型定義

### 値オブジェクト

- 不変
- 値に基づく同一性
- 自己検証
- ドメイン操作を持つ

```php
// 特別なgetterを持たないようなプロパティがない場合は、readonly classとして定義
readonly class Sample {
  public function __constructor(private(set) int $value) {
    if (count($value) > 100) {
      throw new InvalidArgumentsException();
    }
  }
  public function hoge() {
    return explode('/', $this->value);
  }
}

// 特殊なプロパティを持つパターン
class SampleSpecialProperty {
  private static string|null $cache;
  public function __constructor(private(set) string $value) {}

  public function feature1(): string
  {
    // ...いろいろな処理
    if (self::$cache === null) {
      self::$cache = $this->heavyFunction();
    }
    // 後続処理...
  }

  public function feature2(): string
  {
    // 別の処理
    if (self::$cache === null) {
      self::$cache = $this->heavyFunction();
    }
    // 後続処理...
  }

  private function heavyFunction(): string
  {
    // 重い処理
  }
}
```

### エンティティ

- IDに基づく同一性
- 制御された更新
- 整合性ルールを持つ

```php
// エンティティのユニーク性を決定するIDオブジェクト
readonly class UserId {
  public function __construct(private(set) string $id) {}

  public function equals(self $other): bool {
    return $this->id === $other->id;
  }
}

// エンティティ本体
class User {
  public function __construct(
    // IDは必ずreadonly
    private(set) readonly UserId $id,
    // 直接値を変更されないようにprivateプロパティに必ずする。
    private(set) Email $email
  ) {}

  // 値を変更するときはインスタンス(プリミティブな値)ごと変える(不変更新パターン)
  public function setEmail(Email $mail): void
  {
    $this->mail = $mail;
  }
}
```

### リポジトリ

- ドメインモデルのみを扱う
- 永続化の詳細を隠蔽
- テスト用のインメモリ実装を提供


### アダプターパターン

- 外部依存を抽象化
- インターフェースは呼び出し側で定義
- テスト時は容易に差し替え可能

## 実装手順

1. **型設計**
   - まず型を定義
   - ドメインの言語を型で表現

2. **純粋関数から実装**
   - 外部依存のない関数を先に
   - テストを先に書く

3. **副作用を分離**
   - IO操作は関数の境界に押し出す

4. **アダプター実装**
   - 外部サービスやDBへのアクセスを抽象化
   - テスト用モックを用意

## プラクティス

- 小さく始めて段階的に拡張
- 過度な抽象化を避ける
- コードよりも型を重視
- 複雑さに応じてアプローチを調整

## コードスタイル

- 不変更新パターンの活用
- 早期リターンで条件分岐をフラット化
- エラーとユースケースの列挙型定義

## テスト戦略

- 純粋関数の単体テストを優先
- インメモリ実装によるリポジトリテスト
- テスト可能性を設計に組み込む
- アサートファースト：期待結果から逆算